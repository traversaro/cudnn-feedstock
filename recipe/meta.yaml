{% set version = "9.10.1.4" %}
{% set soname = version.split('.')[0] %}
{% set majorminorpatch = '.'.join(version.split('.')[:3]) %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-sbsa" %}  # [aarch64 and arm_variant_type=="sbsa"]
{% set platform = "linux-aarch64" %}  # [aarch64 and arm_variant_type=="tegra"]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: cudnn-split
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda11-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("11")]
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda12-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("12")]
  sha256: f92286c1e84792759c39dc4d79db21ede2f96bf939f6a2f355e7e607e2184a37  # [linux64 and (cuda_compiler_version or "").startswith("11")]
  sha256: be759754e5bd1fcd9b490e224796c87f093c1e92b2b6357854d5371b6aeeb8be  # [linux64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 04b93f4ddb010cde223aeb7713209f37a7bda0b56d72740bc819310876f0d329  # [aarch64 and arm_variant_type=="sbsa" and (cuda_compiler_version or "").startswith("11")]
  sha256: d5cd68d4d09a151ad839a352f6fa01c3f86ccfb498704456892b992c3d8e4c88  # [aarch64 and arm_variant_type=="sbsa" and (cuda_compiler_version or "").startswith("12")]
  sha256: d5cd68d4d09a151ad839a352f6fa01c3f86ccfb498704456892b992c3d8e4c88  # [aarch64 and arm_variant_type=="tegra" and (cuda_compiler_version or "").startswith("12")]
  sha256: 586b2b2347e17ffe95c24b0da3766b67c4b2b98c1fee6fd3c4b4bbd91b2ebbb5  # [win and (cuda_compiler_version or "").startswith("11")]
  sha256: 320ef15635397b00100ca9e18a94fc75de16a8408f4eb9994d18673377dec4fd  # [win and (cuda_compiler_version or "").startswith("12")]

build:
  number: 0
  skip: true  # [cuda_compiler_version in ("None", None)]

requirements:
  build:
    - cf-nvidia-tools 1  # [linux]

outputs:
  # Even though cudnn is a meta package, need build/host/run to be set in order to generate unique outputs with unique hash
  # for each build variant.
  - name: cudnn
    build:
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      # The run_exports is present on cudnn for backward compatibility
      run_exports:
        - {{ pin_subpackage("cudnn", max_pin="x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_compiler_version }}
        - {{ pin_subpackage("libcudnn-dev", exact=True) }}
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - {{ pin_subpackage("libcudnn-dev", exact=True) }}
      run_constrained:
        - cudnn-jit <0a

  - name: libcudnn
    build:
      # Disable binary relocation to workaround patchelf issue
      # xref: https://github.com/NixOS/patchelf/issues/492
      binary_relocation: false
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
    files:
      - lib/libcudnn*.so.*                  # [linux]
      - Library/bin/cudnn*.dll              # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_compiler_version }}
        # For Windows, zlib is statically linked into CUDNN since version 9.2
        # https://docs.nvidia.com/deeplearning/cudnn/latest/release-notes.html#cudnn-9-2-0
        # For Linux, zlib remains a dynamically linked dependency
        - zlib  # [not win]
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - cudatoolkit       # [(cuda_compiler_version or "").startswith("11")]
        - cuda-nvrtc        # [(cuda_compiler_version or "").startswith("12")]
        - libcublas         # [(cuda_compiler_version or "").startswith("12")]
      run_constrained:
        - libcudnn-jit <0a
    test:
      requires:
        - {{ compiler('c') }}  # [linux]
      files:
        - test_load_elf.c      # [linux]
      commands:
        - if not exist %LIBRARY_BIN%/cudnn64_{{ soname }}.dll exit 1                                 # [win]
        - if not exist %LIBRARY_BIN%/cudnn_adv64_{{ soname }}.dll exit 1                             # [win]
        - if not exist %LIBRARY_BIN%/cudnn_cnn64_{{ soname }}.dll exit 1                             # [win]
        - if not exist %LIBRARY_BIN%/cudnn_engines_precompiled64_{{ soname }}.dll exit 1             # [win]
        - if not exist %LIBRARY_BIN%/cudnn_engines_runtime_compiled64_{{ soname }}.dll exit 1        # [win]
        - if not exist %LIBRARY_BIN%/cudnn_graph64_{{ soname }}.dll exit 1                           # [win]
        - if not exist %LIBRARY_BIN%/cudnn_heuristic64_{{ soname }}.dll exit 1                       # [win]
        - if not exist %LIBRARY_BIN%/cudnn_ops64_{{ soname }}.dll exit 1                             # [win]
        - test -f $PREFIX/lib/libcudnn.so.{{ majorminorpatch }}                                      # [linux]
        - test -f $PREFIX/lib/libcudnn.so.{{ soname }}                                               # [linux]
        - test -f $PREFIX/lib/libcudnn_adv.so.{{ majorminorpatch }}                                  # [linux]
        - test -f $PREFIX/lib/libcudnn_adv.so.{{ soname }}                                           # [linux]
        - test -f $PREFIX/lib/libcudnn_cnn.so.{{ majorminorpatch }}                                  # [linux]
        - test -f $PREFIX/lib/libcudnn_cnn.so.{{ soname }}                                           # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_precompiled.so.{{ majorminorpatch }}                  # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_precompiled.so.{{ soname }}                           # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_runtime_compiled.so.{{ majorminorpatch }}             # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_runtime_compiled.so.{{ soname }}                      # [linux]
        - test -f $PREFIX/lib/libcudnn_graph.so.{{ majorminorpatch }}                                # [linux]
        - test -f $PREFIX/lib/libcudnn_graph.so.{{ soname }}                                         # [linux]
        - test -f $PREFIX/lib/libcudnn_heuristic.so.{{ majorminorpatch }}                            # [linux]
        - test -f $PREFIX/lib/libcudnn_heuristic.so.{{ soname }}                                     # [linux]
        - test -f $PREFIX/lib/libcudnn_ops.so.{{ majorminorpatch }}                                  # [linux]
        - test -f $PREFIX/lib/libcudnn_ops.so.{{ soname }}                                           # [linux]
        - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf                              # [linux]
        - for f in $PREFIX/lib/libcudnn*.so.{{ majorminorpatch }}; do ./test_load_elf $f; done       # [linux]

  - name: libcudnn-dev
    build:
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      run_exports:
        - {{ pin_subpackage("libcudnn", max_pin="x") }}
    files:
      - include/cudnn*.h                                                                             # [linux]
      - Library/include/cudnn*.h                                                                     # [win]
      - lib/libcudnn*.so                                                                             # [linux]
      - Library/lib/cudnn*.lib                                                                       # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_compiler_version }}
        - {{ pin_subpackage("libcudnn", exact=True) }}
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - {{ pin_subpackage("libcudnn", exact=True) }}
      run_constrained:
        - libcudnn-jit-dev <0a
    test:
      commands:
        - if not exist %LIBRARY_INC%/cudnn.h exit 1                                                  # [win]
        - if not exist %LIBRARY_INC%/cudnn_adv.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_backend.h exit 1                                          # [win]
        - if not exist %LIBRARY_INC%/cudnn_cnn.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_graph.h exit 1                                            # [win]
        - if not exist %LIBRARY_INC%/cudnn_ops.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_version.h exit 1                                          # [win]
        - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                                                # [win]
        - if not exist %LIBRARY_LIB%/cudnn64_{{ soname }}.lib exit 1                                 # [win]
        - if not exist %LIBRARY_LIB%/cudnn_adv.lib exit 1                                            # [win]
        - if not exist %LIBRARY_LIB%/cudnn_adv64_{{ soname }}.lib exit 1                             # [win]
        - if not exist %LIBRARY_LIB%/cudnn_cnn.lib exit 1                                            # [win]
        - if not exist %LIBRARY_LIB%/cudnn_cnn64_{{ soname }}.lib exit 1                             # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_precompiled.lib exit 1                            # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_precompiled64_{{ soname }}.lib exit 1             # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_runtime_compiled.lib exit 1                       # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_runtime_compiled64_{{ soname }}.lib exit 1        # [win]
        - if not exist %LIBRARY_LIB%/cudnn_graph.lib exit 1                                          # [win]
        - if not exist %LIBRARY_LIB%/cudnn_graph64_{{ soname }}.lib exit 1                           # [win]
        - if not exist %LIBRARY_LIB%/cudnn_heuristic.lib exit 1                                      # [win]
        - if not exist %LIBRARY_LIB%/cudnn_heuristic64_{{ soname }}.lib exit 1                       # [win]
        - if not exist %LIBRARY_LIB%/cudnn_ops.lib exit 1                                            # [win]
        - if not exist %LIBRARY_LIB%/cudnn_ops64_{{ soname }}.lib exit 1                             # [win]
        - test -f $PREFIX/include/cudnn.h                                                            # [linux]
        - test -f $PREFIX/include/cudnn_adv.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_adv_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_backend.h                                                    # [linux]
        - test -f $PREFIX/include/cudnn_backend_v{{ soname }}.h                                      # [linux]
        - test -f $PREFIX/include/cudnn_cnn.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_cnn_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_graph.h                                                      # [linux]
        - test -f $PREFIX/include/cudnn_graph_v{{ soname }}.h                                        # [linux]
        - test -f $PREFIX/include/cudnn_ops.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_ops_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_v{{ soname }}.h                                              # [linux]
        - test -f $PREFIX/include/cudnn_version.h                                                    # [linux]
        - test -f $PREFIX/include/cudnn_version_v{{ soname }}.h                                      # [linux]
        - test -L $PREFIX/lib/libcudnn.so                                                            # [linux]
        - test -L $PREFIX/lib/libcudnn_adv.so                                                        # [linux]
        - test -L $PREFIX/lib/libcudnn_cnn.so                                                        # [linux]
        - test -L $PREFIX/lib/libcudnn_engines_precompiled.so                                        # [linux]
        - test -L $PREFIX/lib/libcudnn_engines_runtime_compiled.so                                   # [linux]
        - test -L $PREFIX/lib/libcudnn_graph.so                                                      # [linux]
        - test -L $PREFIX/lib/libcudnn_heuristic.so                                                  # [linux]
        - test -L $PREFIX/lib/libcudnn_ops.so                                                        # [linux]

  # Even though cudnn-jit is a meta package, need build/host/run to be set in order to generate unique outputs with unique hash
  # for each build variant.
  - name: cudnn-jit
    build:
      skip: true # not shipping for v9.10
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_compiler_version }}
        - {{ pin_subpackage("libcudnn-jit-dev", exact=True) }}
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - {{ pin_subpackage("libcudnn-jit-dev", exact=True) }}
      run_constrained:
        - cudnn <0a

  - name: libcudnn-jit
    build:
      skip: true # not shipping for v9.10
      # Disable binary relocation to workaround patchelf issue
      # xref: https://github.com/NixOS/patchelf/issues/492
      binary_relocation: false
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
    files:
      - Library/bin/cudnn64_{{ soname }}.dll                                          # [win]
      - Library/bin/cudnn_engines_runtime_compiled64_{{ soname }}.dll                 # [win]
      - Library/bin/cudnn_graph64_{{ soname }}.dll                                    # [win]
      - lib/libcudnn.so.{{ majorminorpatch }}                                         # [linux]
      - lib/libcudnn.so.{{ soname }}                                                  # [linux]
      - lib/libcudnn_engines_runtime_compiled.so.{{ majorminorpatch }}                # [linux]
      - lib/libcudnn_engines_runtime_compiled.so.{{ soname }}                         # [linux]
      - lib/libcudnn_graph.so.{{ majorminorpatch }}                                   # [linux]
      - lib/libcudnn_graph.so.{{ soname }}                                            # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib('c') }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - patchelf >=0.12  # [linux]
      host:
        - cuda-version {{ cuda_compiler_version }}
        # For Windows, zlib is statically linked into CUDNN since version 9.2
        # https://docs.nvidia.com/deeplearning/cudnn/latest/release-notes.html#cudnn-9-2-0
        # For Linux, zlib remains a dynamically linked dependency
        - zlib  # [not win]
      run:
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - cudatoolkit       # [(cuda_compiler_version or "").startswith("11")]
        - cuda-nvrtc        # [(cuda_compiler_version or "").startswith("12")]
        - libcublas         # [(cuda_compiler_version or "").startswith("12")]
      run_constrained:
        - libcudnn <0a
    test:
      commands:
        - if not exist %LIBRARY_BIN%/cudnn64_{{ soname }}.dll exit 1                                 # [win]
        - if not exist %LIBRARY_BIN%/cudnn_engines_runtime_compiled64_{{ soname }}.dll exit 1        # [win]
        - if not exist %LIBRARY_BIN%/cudnn_graph64_{{ soname }}.dll exit 1                           # [win]
        - test -f $PREFIX/lib/libcudnn.so.{{ majorminorpatch }}                                      # [linux]
        - test -f $PREFIX/lib/libcudnn.so.{{ soname }}                                               # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_runtime_compiled.so.{{ majorminorpatch }}             # [linux]
        - test -f $PREFIX/lib/libcudnn_engines_runtime_compiled.so.{{ soname }}                      # [linux]
        - test -f $PREFIX/lib/libcudnn_graph.so.{{ majorminorpatch }}                                # [linux]
        - test -f $PREFIX/lib/libcudnn_graph.so.{{ soname }}                                         # [linux]
    about:
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
      summary: Graph JIT configuration for NVIDIA's cuDNN deep neural network acceleration library
      description: |
        This is a runtime package for Graph JIT configuration for NVIDIA's cuDNN deep neural network acceleration library.
        Developers should install libcudnn-jit-dev.

  - name: libcudnn-jit-dev
    build:
      skip: true # not shipping for v9.10
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      run_exports:
        - {{ pin_subpackage("libcudnn-jit", max_pin="x") }}
    files:
      - Library/include/cudnn*.h                                                                  # [win]
      - Library/lib/cudnn.lib                                                                     # [win]
      - Library/lib/cudnn64_{{ soname }}.lib                                                      # [win]
      - Library/lib/cudnn_engines_runtime_compiled.lib                                            # [win]
      - Library/lib/cudnn_engines_runtime_compiled64_{{ soname }}.lib                             # [win]
      - Library/lib/cudnn_graph.lib                                                               # [win]
      - Library/lib/cudnn_graph64_{{ soname }}.lib                                                # [win]
      - include/cudnn*.h                                                                          # [linux]
      - lib/libcudnn.so                                                                           # [linux]
      - lib/libcudnn_engines_runtime_compiled.so                                                  # [linux]
      - lib/libcudnn_graph.so                                                                     # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
      host:
        - cuda-version {{ cuda_compiler_version }}
        - {{ pin_subpackage("libcudnn-jit", exact=True) }}
      run:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - {{ pin_subpackage("libcudnn-jit", exact=True) }}
      run_constrained:
        - libcudnn-dev <0a
    test:
      commands:
        - if not exist %LIBRARY_INC%/cudnn.h exit 1                                                  # [win]
        - if not exist %LIBRARY_INC%/cudnn_adv.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_backend.h exit 1                                          # [win]
        - if not exist %LIBRARY_INC%/cudnn_cnn.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_graph.h exit 1                                            # [win]
        - if not exist %LIBRARY_INC%/cudnn_ops.h exit 1                                              # [win]
        - if not exist %LIBRARY_INC%/cudnn_version.h exit 1                                          # [win]
        - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                                                # [win]
        - if not exist %LIBRARY_LIB%/cudnn64_{{ soname }}.lib exit 1                                 # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_runtime_compiled.lib exit 1                       # [win]
        - if not exist %LIBRARY_LIB%/cudnn_engines_runtime_compiled64_{{ soname }}.lib exit 1        # [win]
        - if not exist %LIBRARY_LIB%/cudnn_graph.lib exit 1                                          # [win]
        - if not exist %LIBRARY_LIB%/cudnn_graph64_{{ soname }}.lib exit 1                           # [win]
        - test -f $PREFIX/include/cudnn.h                                                            # [linux]
        - test -f $PREFIX/include/cudnn_adv.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_adv_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_backend.h                                                    # [linux]
        - test -f $PREFIX/include/cudnn_backend_v{{ soname }}.h                                      # [linux]
        - test -f $PREFIX/include/cudnn_cnn.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_cnn_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_graph.h                                                      # [linux]
        - test -f $PREFIX/include/cudnn_graph_v{{ soname }}.h                                        # [linux]
        - test -f $PREFIX/include/cudnn_ops.h                                                        # [linux]
        - test -f $PREFIX/include/cudnn_ops_v{{ soname }}.h                                          # [linux]
        - test -f $PREFIX/include/cudnn_v{{ soname }}.h                                              # [linux]
        - test -f $PREFIX/include/cudnn_version.h                                                    # [linux]
        - test -f $PREFIX/include/cudnn_version_v{{ soname }}.h                                      # [linux]
        - test -L $PREFIX/lib/libcudnn.so                                                            # [linux]
        - test -L $PREFIX/lib/libcudnn_engines_runtime_compiled.so                                   # [linux]
        - test -L $PREFIX/lib/libcudnn_graph.so                                                      # [linux]
    about:
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
      summary: Graph JIT configuration for NVIDIA's cuDNN deep neural network acceleration library
      description: |
        This is a development package for Graph JIT configuration for NVIDIA's cuDNN deep neural network acceleration library

about:
  home: https://developer.nvidia.com/cudnn
  license: LicenseRef-cuDNN-Software-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of
    primitives for deep neural networks. It provides highly tuned
    implementations of routines arising frequently in DNN applications.

    License Agreements:- The packages are governed by the NVIDIA cuDNN
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuDNN EULA -
    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  doc_url: https://docs.nvidia.com/deeplearning/cudnn/
  dev_url: https://developer.nvidia.com/rdp/cudnn-download

extra:
  feedstock-name: cudnn
  recipe-maintainers:
    - conda-forge/cuda
    - billysuh7
    - adibbley
    - bdice
    - jakirkham
    - vyasr
